# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# Product
appName = 'Roshambo Lite'
language = 'English'
appVersion = '1.0'
sku = 'ROSHAMBO-0001'

# General
rootDirectory = 'Roshambo'
xcodeProject = 'Roshambo.xcodeproj'
versionBumpCommitMessage = 'Bumped version number'
incrementedBuildNumberCommitMessage = 'Incremented build number'
signingIdentity = 'iPhone Distribution: Christian Elies (766K8ALVVD)'
developBranchName = 'develop'
screenshotsPath = './fastlane/screenshots'

# Testing
unitTestScheme = 'UnitTests'
simulator = 'iPhone 5s'

# Beta
betaIpaName = 'Roshambo β.ipa'
betaIpa = "./#{betaIpaName}"
betaScheme = 'Roshambo β'
betaConfiguration = 'Beta'
betaBundleIdentifier = 'de.crelies.Roshambo.beta'
adhocProvisioningProfileIdentifier = 'match AdHoc de.crelies.Roshambo.beta'
adhocExportMethod = 'ad-hoc'

# Release
releaseIpaName = 'Roshambo.ipa'
releaseIpa = "./#{releaseIpaName}"
releaseScheme = 'Roshambo'
releaseConfiguration = 'Release'
releaseBundleIdentifier = 'de.crelies.Roshambo'
appstoreProvisioningProfileIdentifier = 'match AppStore de.crelies.Roshambo'
appstoreExportMethod = 'app-store'

# AppCenter
ownerName = 'crelies'
appName = 'Roshambo'


fastlane_version "2.121.1"

default_platform(:ios)

platform :ios do
    
    
######################## BETA ##############################
    desc "Creates a beta build and uploads it to the MS AppCenter"
    lane :beta do |options|
        apiToken = options[:apiToken]

        build_app(
                  scheme: betaScheme,
                  output_name: betaIpaName,
                  configuration: betaConfiguration,
                  codesigning_identity: signingIdentity,
                  export_method: adhocExportMethod
        )
                  
        appcenter_upload(
                         api_token: apiToken,
                         owner_name: ownerName,
                         app_name: appName,
                         ipa: betaIpa
        )
    end
######################## BETA ##############################


######################## PREPARATION & PROVISIONING ##############################
    desc "Creates the provisioning profiles"
    lane :provision do
        # Create App in Dev Center and App Store Connect
        produce(
                app_name: appName,
                language: language,
                app_version: appVersion,
                sku: sku
        )

        # Create AdHoc provisioning profile (Beta)
        sigh(
             adhoc: true,
             force: true,
             app_identifier: betaBundleIdentifier,
             provisioning_name: adhocProvisioningProfileIdentifier
        )

        # Create AppStore provisioning profile
        sigh(
             force: true,
             app_identifier: releaseBundleIdentifier,
             provisioning_name: appstoreProvisioningProfileIdentifier
        )
    end
######################## PREPARATION & PROVISIONING ##############################


######################## SCREENSHOTS ##############################
    desc "Takes screenshots"
    lane :screenshot do
        snapshot
    end
    
    desc "Frames screenshots"
    lane :framethem do
        frame_screenshots(
                          path: screenshotsPath
        )
    end
######################## SCREENSHOTS ##############################


######################## TESTING ##############################
    desc "Runs unit tests"
    lane :unit_tests do
        scan(
             output_directory: './fastlane/test_output',
             output_types: 'html,junit',
             code_coverage: true,
             open_report: false,
             scheme: unitTestScheme,
             device: simulator
        )
    end
######################## TESTING ##############################

    
######################## RELEASE ##############################
    desc "Sets up release"
    lane :setup_release do |options|
        if options[:bump_type] != nil
            bump_type = options[:bump_type]
            
            bump_version_number(
                                bump_type: bump_type
            )
            
            version_number = get_version_number(xcodeproj: xcodeProject)
            BRANCH_NAME = "release/#{version_number}"
            
            sh("git checkout -b #{BRANCH_NAME}") # This command will fail if branch already exists
            
            git_commit(path: ["./#{rootDirectory}/Resources/Info.plist", "./Tests/UITests/Info.plist", "./Tests/UnitTests/Info.plist"], message: "#{versionBumpCommitMessage} #{version_number}")
            push_to_git_remote(remote_branch: BRANCH_NAME, force: false, tags: false)
        end
    end
    
    private_lane :bump_version_number do |options|
        tag = last_git_tag
        version_number = get_version_number(xcodeproj: xcodeProject)
        bump_type = options[:bump_type]
        
        if tag != nil
            if tag == version_number
                puts "The version number of the project and the tag are equal, that's why we need to increase the version number."
                increment_version_number(bump_type: bump_type)
            elsif
                puts "The version number of the project and the tag are not equal, that's why we don't need to increment the version number."
            end
        end
    end

    desc "Creates release"
    lane :create_release do
        unit_tests
        
        version_number = get_version_number(xcodeproj: xcodeProject)
        BRANCH_NAME = "release/#{version_number}"
        
        ensure_git_branch(
                          branch: BRANCH_NAME
        )
                          
        xcclean(
                scheme: releaseScheme
        )
        
        clear_derived_data
        
        increment_build_number
        git_commit(path: ["./#{xcodeProject}/project.pbxproj", "./#{rootDirectory}/Resources/Info.plist", "./Tests/UITests/Info.plist", "./Tests/UnitTests/Info.plist"], message: incrementedBuildNumberCommitMessage)
        push_to_git_remote(remote_branch: BRANCH_NAME, force: false, tags: false)

        build_app(
                  scheme: appStoreScheme,
                  output_name: releaseIpaName,
                  configuration: releaseConfiguration,
                  codesigning_identity: signingIdentity,
                  exportMethod: appstoreExportMethod
        )
    end
######################## RELEASE ##############################


######################## UPLOADING ##############################
    desc "Uploads to TestFlight"
    lane :upload_testflight do
        upload_to_testflight(
                             app_identifier: releaseBundleIdentifier,
                             ipa: releaseIpa,
                             skip_submission: true
        )
    end

    desc "Uploads to App Store"
    lane :upload do
        upload_to_app_store(
                            app_identifier: releaseBundleIdentifier,
                            ipa: releaseIpa,
                            submit_for_review: false
        )
    end
######################## UPLOADING ##############################


    desc "Creates provisioning profiles, takes screenshots, builds and uploads to App Store"
    lane :gogogo do
        provision
        screenshot
        framethem
        create_release
        testflight
        upload
    end

    error do |lane, exception|
        # This block is called if there was an error running a lane.
    end
end
