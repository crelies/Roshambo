//
//  GameBoardViewModelCreator.swift
//  Roshambo
//
//  Created Christian Elies on 24.04.19.
//  Copyright Â© 2019 Christian Elies. All rights reserved.
//
//  Template generated by Christian Elies @crelies
//

import Foundation

protocol GameBoardViewModelCreatorProvider {
	var gameBoardViewModelCreator: GameBoardViewModelCreatorProtocol { get }
}

protocol GameBoardViewModelCreatorProtocol {
    func createViewModel(forPlayerViewState playerViewState: PlayerViewState, computerViewState: PlayerViewState, gameResult: GameResult) -> GameBoardViewViewModel
}

final class GameBoardViewModelCreator {
	private let dependencies: GameBoardViewModelCreatorDependenciesProtocol

	init(dependencies: GameBoardViewModelCreatorDependenciesProtocol) {
		self.dependencies = dependencies
	}
}

extension GameBoardViewModelCreator: GameBoardViewModelCreatorProtocol {
    func createViewModel(forPlayerViewState playerViewState: PlayerViewState, computerViewState: PlayerViewState, gameResult: GameResult) -> GameBoardViewViewModel {
        var isPlayerWinner = false
        var isComputerWinner = false
        
        switch gameResult {
            case .computerWins:
                isComputerWinner = true
            case .playerWins:
                isPlayerWinner = true
            default: ()
        }
        
        let playerViewViewModel = dependencies.playerViewViewModelCreator.createViewModel(forState: playerViewState,
                                                                                          isWinner: isPlayerWinner)
        let gameResultViewViewModel = GameResultViewViewModel(gameResult: gameResult)
        let computerViewViewModel = dependencies.playerViewViewModelCreator.createViewModel(forState: computerViewState,
                                                                                            isWinner: isComputerWinner)
        return GameBoardViewViewModel(playerViewViewModel: playerViewViewModel,
                                      gameResultViewViewModel: gameResultViewViewModel,
                                      computerViewViewModel: computerViewViewModel)
    }
}
