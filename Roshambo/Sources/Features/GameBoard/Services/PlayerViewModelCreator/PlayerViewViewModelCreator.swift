//
//  PlayerViewViewModelCreator.swift
//  Roshambo
//
//  Created Christian Elies on 24.04.19.
//  Copyright Â© 2019 Christian Elies. All rights reserved.
//
//  Template generated by Christian Elies @crelies
//

import UIKit

protocol PlayerViewViewModelCreatorProvider {
	var playerViewViewModelCreator: PlayerViewViewModelCreatorProtocol { get }
}

protocol PlayerViewViewModelCreatorProtocol {
    func createViewModel(forState state: PlayerViewState, isWinner: Bool) -> PlayerViewViewModel
}

final class PlayerViewViewModelCreator {
	private let dependencies: PlayerViewViewModelCreatorDependenciesProtocol

	init(dependencies: PlayerViewViewModelCreatorDependenciesProtocol) {
		self.dependencies = dependencies
	}
}

extension PlayerViewViewModelCreator: PlayerViewViewModelCreatorProtocol {
    func createViewModel(forState state: PlayerViewState, isWinner: Bool) -> PlayerViewViewModel {
        switch state {
            case .initial:
                return PlayerViewViewModel(isImageViewHidden: false,
                                           image: state.displayImage,
                                           imageViewSize: MetricConstants.PlayerView.ImageView.defaultImageSize,
                                           areActionButtonsHidden: true)
            case .takeAction:
                return PlayerViewViewModel(isImageViewHidden: true,
                                           image: state.displayImage,
                                           imageViewSize: nil,
                                           areActionButtonsHidden: false)
            case .result:
                let imageViewSize = isWinner ? MetricConstants.PlayerView.ImageView.winnerImageSize : MetricConstants.PlayerView.ImageView.defaultImageSize
                return PlayerViewViewModel(isImageViewHidden: false,
                                           image: state.displayImage,
                                           imageViewSize: imageViewSize,
                                           areActionButtonsHidden: true)
        }
    }
}
