//
//  GameBoardViewController.swift
//  Roshambo
//
//  Created Christian Elies on 24.04.19.
//  Copyright Â© 2019 Christian Elies. All rights reserved.
//
//  Template generated by Christian Elies @crelies
//  https://www.christianelies.de
//

import UIKit

protocol GameBoardViewProtocol: GameBoardProtocol {
    func setPresenter(_ presenter: GameBoardPresenterProtocol)
    func setPlayerName(_ playerName: String)
    func setComputerPlayerName(_ playerName: String)
    func updateUI(withViewModel viewModel: GameBoardViewViewModel)
}

final class GameBoardViewController: UIViewController {
    private var presenter: GameBoardPresenterProtocol?
    
    private lazy var resetBarButtonItem: UIBarButtonItem = {
        let resetBarButtonItem = UIBarButtonItem(barButtonSystemItem: .refresh,
                                                 target: self,
                                                 action: #selector(didPressResetBarButtonItem(_:)))
        return resetBarButtonItem
    }()

    private lazy var gameBoardView: (UIView & GameBoardViewViewProtocol) = {
        let gameBoardView = GameBoardView()
        gameBoardView.translatesAutoresizingMaskIntoConstraints = false
        gameBoardView.delegate = self
        return gameBoardView
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        presenter?.viewDidLoad()
    }
    
    @objc private func didPressResetBarButtonItem(_ sender: UIBarButtonItem) {
        presenter?.didPressResetBarButtonItem()
    }
}

extension GameBoardViewController: GameBoardViewProtocol {
    func setPresenter(_ presenter: GameBoardPresenterProtocol) {
        self.presenter = presenter
    }
    
    func setPlayerName(_ playerName: String) {
        gameBoardView.setPlayerName(playerName)
    }
    
    func setComputerPlayerName(_ playerName: String) {
        gameBoardView.setComputerPlayerName(playerName)
    }
    
    func updateUI(withViewModel viewModel: GameBoardViewViewModel) {
        gameBoardView.updateUI(withViewModel: viewModel)
    }
}

extension GameBoardViewController: GameBoardProtocol {
  
}

extension GameBoardViewController: PlayerViewDelegateProtocol {
    func didPressScissorsButton(_ view: PlayerViewProtocol) {
        presenter?.didPressScissorsButton(view)
    }
    
    func didPressRockButton(_ view: PlayerViewProtocol) {
        presenter?.didPressRockButton(view)
    }
    
    func didPressPaperButton(_ view: PlayerViewProtocol) {
        presenter?.didPressPaperButton(view)
    }
}

extension GameBoardViewController {
    private func setupView() {
        view.addSubview(gameBoardView)
        setupConstraints()
        
        view.backgroundColor = UIColor(red: 232/255, green: 232/255, blue: 232/255, alpha: 1)
        
        gameBoardView.roundCorners(cornerMask: .AllCorners, cornerRadius: 8)
        
        navigationItem.rightBarButtonItem = resetBarButtonItem
    }
    
    private func setupConstraints() {
        gameBoardView.topAnchor.constraint(greaterThanOrEqualTo: view.safeAreaLayoutGuide.topAnchor, constant: 16).isActive = true
        gameBoardView.bottomAnchor.constraint(lessThanOrEqualTo: view.bottomAnchor, constant: -16).isActive = true
        gameBoardView.leadingAnchor.constraint(greaterThanOrEqualTo: view.leadingAnchor, constant: 16).isActive = true
        gameBoardView.trailingAnchor.constraint(lessThanOrEqualTo: view.trailingAnchor, constant: -16).isActive = true
        gameBoardView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        gameBoardView.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
        gameBoardView.widthAnchor.constraint(lessThanOrEqualToConstant: 414).isActive = true
        gameBoardView.heightAnchor.constraint(lessThanOrEqualToConstant: 667).isActive = true
    }
}
