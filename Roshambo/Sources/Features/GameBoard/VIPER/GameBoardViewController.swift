//
//  GameBoardViewController.swift
//  Roshambo
//
//  Created Christian Elies on 24.04.19.
//  Copyright Â© 2019 Christian Elies. All rights reserved.
//
//  Template generated by Christian Elies @crelies
//  https://www.christianelies.de
//

import UIKit

protocol GameBoardViewProtocol: GameBoardProtocol {
    func setPresenter(_ presenter: GameBoardPresenterProtocol)
    func setPlayerName(_ playerName: String)
    func setComputerPlayerName(_ playerName: String)
    func updateUI(withViewModel viewModel: GameBoardViewViewModel)
}

final class GameBoardViewController: UIViewController {
    private var presenter: GameBoardPresenterProtocol?
    
    private lazy var infoBarButtonItem: UIBarButtonItem = {
        let infoButton = UIButton(type: .infoLight)
        infoButton.addTarget(self, action: #selector(didPressInfoBarButtonItem(_:)), for: .touchUpInside)
        let infoBarButtonItem = UIBarButtonItem(customView: infoButton)
        return infoBarButtonItem
    }()
    
    private lazy var resetBarButtonItem: UIBarButtonItem = {
        let resetBarButtonItem = UIBarButtonItem(barButtonSystemItem: .refresh,
                                                 target: self,
                                                 action: #selector(didPressResetBarButtonItem(_:)))
        return resetBarButtonItem
    }()
    
    private lazy var gameBoardViewContainer: UIView = {
        let gameBoardViewContainer = UIView()
        gameBoardViewContainer.translatesAutoresizingMaskIntoConstraints = false
        return gameBoardViewContainer
    }()

    private lazy var gameBoardView: (UIView & GameBoardViewViewProtocol) = {
        let gameBoardView = GameBoardView()
        gameBoardView.translatesAutoresizingMaskIntoConstraints = false
        gameBoardView.delegate = self
        return gameBoardView
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        presenter?.viewDidLoad()
    }
    
    @objc private func didPressInfoBarButtonItem(_ sender: UIBarButtonItem) {
        presenter?.didPressInfoBarButtonItem()
    }
    
    @objc private func didPressResetBarButtonItem(_ sender: UIBarButtonItem) {
        presenter?.didPressResetBarButtonItem()
    }
}

extension GameBoardViewController: GameBoardViewProtocol {
    func setPresenter(_ presenter: GameBoardPresenterProtocol) {
        self.presenter = presenter
    }
    
    func setPlayerName(_ playerName: String) {
        gameBoardView.setPlayerName(playerName)
    }
    
    func setComputerPlayerName(_ playerName: String) {
        gameBoardView.setComputerPlayerName(playerName)
    }
    
    func updateUI(withViewModel viewModel: GameBoardViewViewModel) {
        gameBoardView.updateUI(withViewModel: viewModel)
    }
}

extension GameBoardViewController: GameBoardProtocol {
  
}

extension GameBoardViewController: PlayerViewDelegateProtocol {
    func didPressScissorsButton(_ view: PlayerViewProtocol) {
        presenter?.didPressScissorsButton(view)
    }
    
    func didPressRockButton(_ view: PlayerViewProtocol) {
        presenter?.didPressRockButton(view)
    }
    
    func didPressPaperButton(_ view: PlayerViewProtocol) {
        presenter?.didPressPaperButton(view)
    }
}

extension GameBoardViewController {
    private func setupView() {
        gameBoardViewContainer.addSubview(gameBoardView)
        view.addSubview(gameBoardViewContainer)
        
        setupConstraints()
        
        view.backgroundColor = MetricConstants.backgroundColor
        gameBoardViewContainer.backgroundColor = .clear
        
        gameBoardView.roundCorners(cornerMask: .AllCorners, cornerRadius: MetricConstants.cornerRadius)
        
        navigationItem.leftBarButtonItem = infoBarButtonItem
        navigationItem.rightBarButtonItem = resetBarButtonItem
    }
    
    private func setupConstraints() {
        setupGameBoardViewContainerConstraints()
        setupGameBoardViewConstraints()
    }
    
    private func setupGameBoardViewContainerConstraints() {
        gameBoardViewContainer.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor).isActive = true
        gameBoardViewContainer.centerYAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerYAnchor).isActive = true
        
        setupGameBoardViewContainerEdgesConstraints()
        setupGameBoardViewContainerSizeConstraints()
    }
    
    private func setupGameBoardViewContainerEdgesConstraints() {
        let gameBoardViewContainerTopConstraint = gameBoardViewContainer.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: MetricConstants.GameBoardViewContainer.insets.top)
        gameBoardViewContainerTopConstraint.priority = UILayoutPriority(999)
        gameBoardViewContainerTopConstraint.isActive = true
        gameBoardViewContainer.topAnchor.constraint(greaterThanOrEqualTo: view.safeAreaLayoutGuide.topAnchor, constant: MetricConstants.GameBoardViewContainer.minimumInsets.top).isActive = true

        let gameBoardViewContainerBottomConstraint = gameBoardViewContainer.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -MetricConstants.GameBoardViewContainer.insets.bottom)
        gameBoardViewContainerBottomConstraint.priority = UILayoutPriority(998)
        gameBoardViewContainerBottomConstraint.isActive = true
        gameBoardViewContainer.bottomAnchor.constraint(lessThanOrEqualTo: view.bottomAnchor, constant: -MetricConstants.GameBoardViewContainer.minimumInsets.bottom).isActive = true

        let gameBoardViewContainerLeadingConstraint = gameBoardViewContainer.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: MetricConstants.GameBoardViewContainer.insets.left)
        gameBoardViewContainerLeadingConstraint.priority = UILayoutPriority(998)
        gameBoardViewContainerLeadingConstraint.isActive = true
        gameBoardViewContainer.leadingAnchor.constraint(greaterThanOrEqualTo: view.leadingAnchor, constant: MetricConstants.GameBoardViewContainer.minimumInsets.left).isActive = true

        let gameBoardViewContainerTrailingConstraint = gameBoardViewContainer.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -MetricConstants.GameBoardViewContainer.insets.right)
        gameBoardViewContainerTrailingConstraint.priority = UILayoutPriority(998)
        gameBoardViewContainerTrailingConstraint.isActive = true
        gameBoardViewContainer.trailingAnchor.constraint(lessThanOrEqualTo: view.trailingAnchor, constant: -MetricConstants.GameBoardViewContainer.minimumInsets.right).isActive = true
    }
    
    private func setupGameBoardViewContainerSizeConstraints() {
        let gameBoardViewContainerWidthConstraint = gameBoardViewContainer.widthAnchor.constraint(lessThanOrEqualToConstant: MetricConstants.GameBoardView.maxWidth)
        gameBoardViewContainerWidthConstraint.priority = UILayoutPriority(999)
        gameBoardViewContainerWidthConstraint.isActive = true
        
        gameBoardViewContainer.heightAnchor.constraint(lessThanOrEqualToConstant: MetricConstants.GameBoardView.maxHeight).isActive = true
    }
    
    private func setupGameBoardViewConstraints() {
        gameBoardView.topAnchor.constraint(equalTo: gameBoardViewContainer.topAnchor).isActive = true
        gameBoardView.bottomAnchor.constraint(equalTo: gameBoardViewContainer.bottomAnchor).isActive = true
        gameBoardView.leadingAnchor.constraint(equalTo: gameBoardViewContainer.leadingAnchor).isActive = true
        gameBoardView.trailingAnchor.constraint(equalTo: gameBoardViewContainer.trailingAnchor).isActive = true
    }
}
