//
//  GameBoardPresenter.swift
//  Roshambo
//
//  Created Christian Elies on 24.04.19.
//  Copyright Â© 2019 Christian Elies. All rights reserved.
//
//  Template generated by Christian Elies @crelies
//  https://www.christianelies.de
//

import UIKit

protocol GameBoardPresenterProtocol: class {
    func viewDidLoad()
    func didPressScissorsButton(_ view: PlayerViewProtocol)
    func didPressRockButton(_ view: PlayerViewProtocol)
    func didPressPaperButton(_ view: PlayerViewProtocol)
    func didPressResetBarButtonItem()
}

final class GameBoardPresenter {
    private let dependencies: GameBoardPresenterDependenciesProtocol
    private weak var view: (GameBoardViewProtocol & UIViewController)?
    private let interactor: GameBoardInteractorProtocol
    private let router: GameBoardRouterProtocol
    private weak var delegate: GameBoardDelegateProtocol?
    private var playerViewState: PlayerViewState
    private var computerViewState: PlayerViewState
    
    init(dependencies: GameBoardPresenterDependenciesProtocol, 
         view: (GameBoardViewProtocol & UIViewController), 
         interactor: GameBoardInteractorProtocol, 
         router: GameBoardRouterProtocol, 
         delegate: GameBoardDelegateProtocol?) {
        self.dependencies = dependencies
        self.view = view
        self.interactor = interactor
        self.router = router
        self.delegate = delegate
        playerViewState = .takeAction
        computerViewState = .initial
    }
}

extension GameBoardPresenter: GameBoardPresenterProtocol {
    func viewDidLoad() {
        view?.setPlayerName("You")
        view?.setComputerPlayerName("Computer")
        updateUI(usingWinnerRoshambo: nil)
    }
    
    func didPressScissorsButton(_ view: PlayerViewProtocol) {
        let playerRoshambo: Roshambo = .scissors
        playerViewState = .result(roshambo: playerRoshambo)
        
        let computerRoshambo = interactor.generateRoshambo()
        computerViewState = .result(roshambo: computerRoshambo)
        
        let winnerRoshambo = interactor.getWinner(playerRoshambo: playerRoshambo,
                                                  computerRoshambo: computerRoshambo)
        updateUI(usingWinnerRoshambo: winnerRoshambo)
    }
    
    func didPressRockButton(_ view: PlayerViewProtocol) {
        let playerRoshambo: Roshambo = .rock
        playerViewState = .result(roshambo: playerRoshambo)
        
        let computerRoshambo = interactor.generateRoshambo()
        computerViewState = .result(roshambo: computerRoshambo)
        
        let winnerRoshambo = interactor.getWinner(playerRoshambo: playerRoshambo,
                                                  computerRoshambo: computerRoshambo)
        updateUI(usingWinnerRoshambo: winnerRoshambo)
    }
    
    func didPressPaperButton(_ view: PlayerViewProtocol) {
        let playerRoshambo: Roshambo = .paper
        playerViewState = .result(roshambo: playerRoshambo)
        
        let computerRoshambo = interactor.generateRoshambo()
        computerViewState = .result(roshambo: computerRoshambo)
        
        let winnerRoshambo = interactor.getWinner(playerRoshambo: playerRoshambo,
                                                  computerRoshambo: computerRoshambo)
        updateUI(usingWinnerRoshambo: winnerRoshambo)
    }
    
    func didPressResetBarButtonItem() {
        playerViewState = .takeAction
        computerViewState = .initial
        
        updateUI(usingWinnerRoshambo: nil)
    }
}

extension GameBoardPresenter {
    private func updateUI(usingWinnerRoshambo winnerRoshambo: Roshambo?) {
        let gameBoardViewViewModel = dependencies.gameBoardViewModelCreator.createViewModel(forPlayerViewState: playerViewState,
                                                                                            computerViewState: computerViewState,
                                                                                            winnerRoshambo: winnerRoshambo)
        view?.updateUI(withViewModel: gameBoardViewViewModel)
    }
}
